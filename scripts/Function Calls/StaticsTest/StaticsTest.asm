//  Boostrap code
@256
D=A
@SP
M=D
//  call Sys.init 0
@RETURN_0
D=A
@SP
AM=M+1
A=A-1
M=D
@LCL
D=M
@SP
AM=M+1
A=A-1
M=D
@ARG
D=M
@SP
AM=M+1
A=A-1
M=D
@THIS
D=M
@SP
AM=M+1
A=A-1
M=D
@THAT
D=M
@SP
AM=M+1
A=A-1
M=D
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.init
0;JMP
(RETURN_0)
//  function Class1.set 0
(Class1.set)
//  push argument 0
@ARG
A=M
D=M
@SP
AM=M+1
A=A-1
M=D
//  pop static 0
@Class1.0
D=A
@SP
AM=M-1
D=D+M
A=D-M
D=D-A
M=D
//  push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
AM=M+1
A=A-1
M=D
//  pop static 1
@Class1.1
D=A
@SP
AM=M-1
D=D+M
A=D-M
D=D-A
M=D
//  push constant 0
@0
D=A
@SP
AM=M+1
A=A-1
M=D
//  return
@LCL
D=M
@frame
M=D
@5
A=D-A
D=M
@return
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@return
A=M
0;JMP
//  function Class1.get 0
(Class1.get)
//  push static 0
@Class1.0
D=M
@SP
AM=M+1
A=A-1
M=D
//  push static 1
@Class1.1
D=M
@SP
AM=M+1
A=A-1
M=D
//  sub
@SP
AM=M-1
D=M
@SP
AM=M-1
M=M-D
@SP
M=M+1
//  return
@LCL
D=M
@frame
M=D
@5
A=D-A
D=M
@return
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@return
A=M
0;JMP
//  function Sys.init 0
(Sys.init)
//  push constant 6
@6
D=A
@SP
AM=M+1
A=A-1
M=D
//  push constant 8
@8
D=A
@SP
AM=M+1
A=A-1
M=D
//  call Class1.set 2
@RETURN_1
D=A
@SP
AM=M+1
A=A-1
M=D
@LCL
D=M
@SP
AM=M+1
A=A-1
M=D
@ARG
D=M
@SP
AM=M+1
A=A-1
M=D
@THIS
D=M
@SP
AM=M+1
A=A-1
M=D
@THAT
D=M
@SP
AM=M+1
A=A-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Class1.set
0;JMP
(RETURN_1)
//  pop temp 0
@5
D=A
@0
A=D+A
D=A
@SP
AM=M-1
D=D+M
A=D-M
D=D-A
M=D
//  push constant 23
@23
D=A
@SP
AM=M+1
A=A-1
M=D
//  push constant 15
@15
D=A
@SP
AM=M+1
A=A-1
M=D
//  call Class2.set 2
@RETURN_2
D=A
@SP
AM=M+1
A=A-1
M=D
@LCL
D=M
@SP
AM=M+1
A=A-1
M=D
@ARG
D=M
@SP
AM=M+1
A=A-1
M=D
@THIS
D=M
@SP
AM=M+1
A=A-1
M=D
@THAT
D=M
@SP
AM=M+1
A=A-1
M=D
@SP
D=M
@7
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Class2.set
0;JMP
(RETURN_2)
//  pop temp 0
@5
D=A
@0
A=D+A
D=A
@SP
AM=M-1
D=D+M
A=D-M
D=D-A
M=D
//  call Class1.get 0
@RETURN_3
D=A
@SP
AM=M+1
A=A-1
M=D
@LCL
D=M
@SP
AM=M+1
A=A-1
M=D
@ARG
D=M
@SP
AM=M+1
A=A-1
M=D
@THIS
D=M
@SP
AM=M+1
A=A-1
M=D
@THAT
D=M
@SP
AM=M+1
A=A-1
M=D
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Class1.get
0;JMP
(RETURN_3)
//  call Class2.get 0
@RETURN_4
D=A
@SP
AM=M+1
A=A-1
M=D
@LCL
D=M
@SP
AM=M+1
A=A-1
M=D
@ARG
D=M
@SP
AM=M+1
A=A-1
M=D
@THIS
D=M
@SP
AM=M+1
A=A-1
M=D
@THAT
D=M
@SP
AM=M+1
A=A-1
M=D
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Class2.get
0;JMP
(RETURN_4)
//  label WHILE
(Sys.init.WHILE)
//  goto WHILE
@Sys.init.WHILE
0;JMP
//  function Class2.set 0
(Class2.set)
//  push argument 0
@ARG
A=M
D=M
@SP
AM=M+1
A=A-1
M=D
//  pop static 0
@Class2.0
D=A
@SP
AM=M-1
D=D+M
A=D-M
D=D-A
M=D
//  push argument 1
@ARG
D=M
@1
A=D+A
D=M
@SP
AM=M+1
A=A-1
M=D
//  pop static 1
@Class2.1
D=A
@SP
AM=M-1
D=D+M
A=D-M
D=D-A
M=D
//  push constant 0
@0
D=A
@SP
AM=M+1
A=A-1
M=D
//  return
@LCL
D=M
@frame
M=D
@5
A=D-A
D=M
@return
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@return
A=M
0;JMP
//  function Class2.get 0
(Class2.get)
//  push static 0
@Class2.0
D=M
@SP
AM=M+1
A=A-1
M=D
//  push static 1
@Class2.1
D=M
@SP
AM=M+1
A=A-1
M=D
//  sub
@SP
AM=M-1
D=M
@SP
AM=M-1
M=M-D
@SP
M=M+1
//  return
@LCL
D=M
@frame
M=D
@5
A=D-A
D=M
@return
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@return
A=M
0;JMP
