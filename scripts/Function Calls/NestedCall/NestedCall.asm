//  Boostrap code
@256
D=A
@SP
M=D
//  call Sys.init 0
@RETURN_0
D=A
@SP
AM=M+1
A=A-1
M=D
@LCL
D=M
@SP
AM=M+1
A=A-1
M=D
@ARG
D=M
@SP
AM=M+1
A=A-1
M=D
@THIS
D=M
@SP
AM=M+1
A=A-1
M=D
@THAT
D=M
@SP
AM=M+1
A=A-1
M=D
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.init
0;JMP
(RETURN_0)
//  function Sys.init 0
(Sys.init)
//  push constant 4000
@4000
D=A
@SP
AM=M+1
A=A-1
M=D
//  pop pointer 0
@THIS
D=A
@SP
AM=M-1
D=D+M
A=D-M
D=D-A
M=D
//  push constant 5000
@5000
D=A
@SP
AM=M+1
A=A-1
M=D
//  pop pointer 1
@THAT
D=A
@SP
AM=M-1
D=D+M
A=D-M
D=D-A
M=D
//  call Sys.main 0
@RETURN_1
D=A
@SP
AM=M+1
A=A-1
M=D
@LCL
D=M
@SP
AM=M+1
A=A-1
M=D
@ARG
D=M
@SP
AM=M+1
A=A-1
M=D
@THIS
D=M
@SP
AM=M+1
A=A-1
M=D
@THAT
D=M
@SP
AM=M+1
A=A-1
M=D
@SP
D=M
@5
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.main
0;JMP
(RETURN_1)
//  pop temp 1
@5
D=A
@1
A=D+A
D=A
@SP
AM=M-1
D=D+M
A=D-M
D=D-A
M=D
//  label LOOP
(Sys.init.LOOP)
//  goto LOOP
@Sys.init.LOOP
0;JMP
//  function Sys.main 5
(Sys.main)
@LCL
D=M
@0
A=D+A
M=0
@SP
M=M+1
@LCL
D=M
@1
A=D+A
M=0
@SP
M=M+1
@LCL
D=M
@2
A=D+A
M=0
@SP
M=M+1
@LCL
D=M
@3
A=D+A
M=0
@SP
M=M+1
@LCL
D=M
@4
A=D+A
M=0
@SP
M=M+1
//  push constant 4001
@4001
D=A
@SP
AM=M+1
A=A-1
M=D
//  pop pointer 0
@THIS
D=A
@SP
AM=M-1
D=D+M
A=D-M
D=D-A
M=D
//  push constant 5001
@5001
D=A
@SP
AM=M+1
A=A-1
M=D
//  pop pointer 1
@THAT
D=A
@SP
AM=M-1
D=D+M
A=D-M
D=D-A
M=D
//  push constant 200
@200
D=A
@SP
AM=M+1
A=A-1
M=D
//  pop local 1
@LCL
D=M
@1
A=D+A
D=A
@SP
AM=M-1
D=D+M
A=D-M
D=D-A
M=D
//  push constant 40
@40
D=A
@SP
AM=M+1
A=A-1
M=D
//  pop local 2
@LCL
D=M
@2
A=D+A
D=A
@SP
AM=M-1
D=D+M
A=D-M
D=D-A
M=D
//  push constant 6
@6
D=A
@SP
AM=M+1
A=A-1
M=D
//  pop local 3
@LCL
D=M
@3
A=D+A
D=A
@SP
AM=M-1
D=D+M
A=D-M
D=D-A
M=D
//  push constant 123
@123
D=A
@SP
AM=M+1
A=A-1
M=D
//  call Sys.add12 1
@RETURN_2
D=A
@SP
AM=M+1
A=A-1
M=D
@LCL
D=M
@SP
AM=M+1
A=A-1
M=D
@ARG
D=M
@SP
AM=M+1
A=A-1
M=D
@THIS
D=M
@SP
AM=M+1
A=A-1
M=D
@THAT
D=M
@SP
AM=M+1
A=A-1
M=D
@SP
D=M
@6
D=D-A
@ARG
M=D
@SP
D=M
@LCL
M=D
@Sys.add12
0;JMP
(RETURN_2)
//  pop temp 0
@5
D=A
@0
A=D+A
D=A
@SP
AM=M-1
D=D+M
A=D-M
D=D-A
M=D
//  push local 0
@LCL
A=M
D=M
@SP
AM=M+1
A=A-1
M=D
//  push local 1
@LCL
D=M
@1
A=D+A
D=M
@SP
AM=M+1
A=A-1
M=D
//  push local 2
@LCL
D=M
@2
A=D+A
D=M
@SP
AM=M+1
A=A-1
M=D
//  push local 3
@LCL
D=M
@3
A=D+A
D=M
@SP
AM=M+1
A=A-1
M=D
//  push local 4
@LCL
D=M
@4
A=D+A
D=M
@SP
AM=M+1
A=A-1
M=D
//  add
@SP
AM=M-1
D=M
@SP
AM=M-1
M=M+D
@SP
M=M+1
//  add
@SP
AM=M-1
D=M
@SP
AM=M-1
M=M+D
@SP
M=M+1
//  add
@SP
AM=M-1
D=M
@SP
AM=M-1
M=M+D
@SP
M=M+1
//  add
@SP
AM=M-1
D=M
@SP
AM=M-1
M=M+D
@SP
M=M+1
//  return
@LCL
D=M
@frame
M=D
@5
A=D-A
D=M
@return
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@return
A=M
0;JMP
//  function Sys.add12 0
(Sys.add12)
//  push constant 4002
@4002
D=A
@SP
AM=M+1
A=A-1
M=D
//  pop pointer 0
@THIS
D=A
@SP
AM=M-1
D=D+M
A=D-M
D=D-A
M=D
//  push constant 5002
@5002
D=A
@SP
AM=M+1
A=A-1
M=D
//  pop pointer 1
@THAT
D=A
@SP
AM=M-1
D=D+M
A=D-M
D=D-A
M=D
//  push argument 0
@ARG
A=M
D=M
@SP
AM=M+1
A=A-1
M=D
//  push constant 12
@12
D=A
@SP
AM=M+1
A=A-1
M=D
//  add
@SP
AM=M-1
D=M
@SP
AM=M-1
M=M+D
@SP
M=M+1
//  return
@LCL
D=M
@frame
M=D
@5
A=D-A
D=M
@return
M=D
@SP
AM=M-1
D=M
@ARG
A=M
M=D
D=A+1
@SP
M=D
@frame
D=M
@1
A=D-A
D=M
@THAT
M=D
@frame
D=M
@2
A=D-A
D=M
@THIS
M=D
@frame
D=M
@3
A=D-A
D=M
@ARG
M=D
@frame
D=M
@4
A=D-A
D=M
@LCL
M=D
@return
A=M
0;JMP
